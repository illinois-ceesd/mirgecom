name: CI

on:
  pull_request:
  push:
    branches: main
  schedule:
  - cron:  '5 0 * * *'


jobs:
    flake8:
        name: Flake8
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        -
          uses: actions/setup-python@v1
          with:
            # matches compat target in setup.py
            python-version: '3.8'
        - name: Flake8 test
          run: |
            python3 -m venv myenv
            source myenv/bin/activate
            python -m pip install wheel
            python -m pip install flake8 pep8-naming flake8-quotes flake8-bugbear
            python -m flake8 --show-source --statistics "$(basename $GITHUB_REPOSITORY)" test examples setup.py doc/conf.py && echo "Flake8 found no errors."

    pylint:
        name: Pylint
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        -
          uses: actions/setup-python@v1
          with:
            python-version: '3.x'
        - name: Install
          run: |
            . .ci-support/install.sh

        - name: Pylint
          run: |
            MINIFORGE_INSTALL_DIR=.miniforge3
            . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
            python -m pip install wheel
            python -m pip install pylint pyyaml
            curl -L -O https://raw.githubusercontent.com/inducer/ci-support/master/run-pylint.py
            python run-pylint.py --yaml-rcfile=.pylintrc.yml "$(basename $GITHUB_REPOSITORY)" test examples && echo "Pylint found no errors."

    pydocstyle:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        -
          uses: actions/setup-python@v1
          with:
            python-version: '3.x'
        - name: Lint
          run: |
            python3 -m venv myenv
            source myenv/bin/activate
            python -m pip install wheel
            python -m pip install pydocstyle
            python -m pydocstyle "$(basename $GITHUB_REPOSITORY)" && echo "pydocstyle found no errors."

    pytest:
        name: Pytest ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            os: [ubuntu-latest, macos-latest]

        steps:
        - uses: actions/checkout@v2
        - name: Install
          run: |
            . .ci-support/install.sh

        - name: Run tests
          run: |
            MINIFORGE_INSTALL_DIR=.miniforge3
            . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
            cd test
            if [[ ${{ matrix.os }} == "macos-latest" ]]; then
              export PYOPENCL_TEST=port:pthread
            fi

            python -m pytest --durations=10 --tb=native --junitxml=pytest.xml --doctest-modules -rxsw .

    examples:
        name: Examples ${{ matrix.os }}
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            os: [ubuntu-latest, macos-latest]

        steps:
        - uses: actions/checkout@v2
        - name: Install
          run: |
            . .ci-support/install.sh

        - name: Run examples
          run: |
            MINIFORGE_INSTALL_DIR=.miniforge3
            . "$MINIFORGE_INSTALL_DIR/bin/activate" testing
            examples/run_examples.sh ./examples

    doc:
        name: Documentation
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v2
        - name: Install
          run: |
            . .ci-support/install.sh

        - name: Build docs
          run: |
            MINIFORGE_INSTALL_DIR=.miniforge3
            . "$MINIFORGE_INSTALL_DIR/bin/activate" testing

            conda install sphinx graphviz
            pip install sphinx-math-dollar sphinx-copybutton furo
            cd doc
            make html SPHINXOPTS="-W --keep-going -n"

    emirge:
        name: Emirge installation
        runs-on: ${{ matrix.os }}
        strategy:
          matrix:
            os: [ubuntu-latest, macos-latest]

        steps:
        - uses: actions/checkout@v2
        - name: Install emirge
          run: |
            [[ $(uname) == Linux ]] && sudo apt-get install -y openmpi-bin libopenmpi-dev
            [[ $(uname) == Darwin ]] && brew update && brew install mpich
            cd ..
            git clone https://github.com/illinois-ceesd/emirge
            cd emirge
            cp -a ../mirgecom .
            ./install.sh --skip-clone

        - name: Run simple mirgecom test
          run: |
            cd ..
            source emirge/config/activate_env.sh
            cd mirgecom/examples
            python -m mpi4py ./wave-eager-mpi.py

